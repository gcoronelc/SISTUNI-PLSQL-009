

-- ========================================================
-- DEFINICIÃ“N DEL PAQUETE: SISCE.PKG_SCE_PARAMETROS
-- ========================================================

CREATE OR REPLACE PACKAGE SISCE.PKG_SCE_PARAMETROS IS

-- Tipos del paquete
TYPE T_CURSOR IS REF CURSOR;

TYPE T_ARRAY_INT IS TABLE OF NUMBER(8) INDEX BY PLS_INTEGER;

TYPE T_ARRAY_STRING IS TABLE OF VARCHAR2(100) INDEX BY PLS_INTEGER;


-- Trae todas las tablas, para llenar combos
PROCEDURE PRC_GET_TABLAS( P_CURSOR OUT NOCOPY T_CURSOR);

-- Trae el contenido de una tabla, para llenar combos
PROCEDURE PRC_GET_TABLAS_DETALLE( P_TABLA IN VARCHAR2, P_CURSOR OUT NOCOPY T_CURSOR);

-- Trae las tablas filtradas por nombre
PROCEDURE PRC_GET_TABLAS_FILTAR( P_NOMBRE IN VARCHAR2, P_CURSOR OUT NOCOPY T_CURSOR);

-- Trae el contenido de una tabla
PROCEDURE PRC_GET_TABLAS_CONTENIDO( P_TABLA IN VARCHAR2, P_CURSOR OUT NOCOPY T_CURSOR); 

-- Trae el contenido de un registro
PROCEDURE PRC_GET_TABLAS_REG( P_ID_PARAMETRO IN VARCHAR2, P_CURSOR OUT NOCOPY T_CURSOR);

-- Eliminar logicamente un registro de la Tabla T_SCEL_PARAMETROS
PROCEDURE PRC_DELETE_TABLAS_REG(
    P_ID_PARAMETRO IN T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
    P_IP           IN T_SCEM_AUDITORIA.IP%TYPE,
    P_USUARIO      IN T_SCEM_AUDITORIA.USUARIO%TYPE 
);

-- Recuperar eliminacion logica de un registro de la Tabla T_SCEL_PARAMETROS
PROCEDURE PRC_RECUPERACION_TABLAS_REG(
    P_ID_PARAMETRO IN T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
    P_IP           IN T_SCEM_AUDITORIA.IP%TYPE,
    P_USUARIO      IN T_SCEM_AUDITORIA.USUARIO%TYPE 
);

PROCEDURE PRC_UPDATE_TABLAS_TABLA(
    P_ID       IN T_ARRAY_STRING,
    P_CODIGO   IN T_ARRAY_STRING,
    P_ORDEN    IN T_ARRAY_INT,
    P_IP       IN T_SCEM_AUDITORIA.IP%TYPE,
    P_USUARIO  IN T_SCEM_AUDITORIA.USUARIO%TYPE 
);


-- Insertar un registro en la Tabla T_SCEL_PARAMETROS
PROCEDURE PRC_INSERT_TABLAS_REG(
    P_ID_PARAMETRO OUT T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
    P_ID_PADRE     IN  T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
    P_CODIGO       IN  T_SCEL_PARAMETROS.CODIGO%TYPE,
    P_DESCRIPCION  IN  T_SCEL_PARAMETROS.DESCRIPCION%TYPE,
    P_ORDEN        IN  T_SCEL_PARAMETROS.ORDEN%TYPE,
    P_ESTADO       IN  T_SCEL_PARAMETROS.ESTADO%TYPE,
    P_IP           IN  T_SCEM_AUDITORIA.IP%TYPE,
    P_USUARIO      IN  T_SCEM_AUDITORIA.USUARIO%TYPE
);



-- Actualizar Contenido a la Tabla T_SCEL_PARAMETROS
PROCEDURE PRC_UPDATE_TABLAS_REG(
    P_ID_PARAMETRO IN T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
    P_CODIGO       IN T_SCEL_PARAMETROS.CODIGO%TYPE,
    P_DESCRIPCION  IN T_SCEL_PARAMETROS.DESCRIPCION%TYPE,
    P_ORDEN        IN T_SCEL_PARAMETROS.ORDEN%TYPE,
    P_ESTADO       IN T_SCEL_PARAMETROS.ESTADO%TYPE,
    P_IP           IN T_SCEM_AUDITORIA.IP%TYPE,
    P_USUARIO      IN T_SCEM_AUDITORIA.USUARIO%TYPE 
);


END;
/



-- ========================================================
-- IMPLEMENTACION DEL PAQUETE: SISCE.PKG_SCE_PARAMETROS
-- ========================================================



CREATE OR REPLACE PACKAGE BODY SISCE.PKG_SCE_PARAMETROS IS



PROCEDURE PRC_GET_TABLAS( 
    P_CURSOR OUT NOCOPY T_CURSOR
)
IS
BEGIN

  OPEN p_cursor FOR
    SELECT TO_CHAR( ID_PARAMETRO ) CODE, DESCRIPCION NAME
    FROM T_SCEL_PARAMETROS
    WHERE LENGTH(ID_PARAMETRO) = 2
    ORDER BY DESCRIPCION;

END;



PROCEDURE PRC_GET_TABLAS_DETALLE( 
    P_TABLA IN VARCHAR2, 
    P_CURSOR OUT NOCOPY T_CURSOR
    )
IS
  V_PARAM VARCHAR2(10);
BEGIN

  V_PARAM := P_TABLA || '%';

  IF( INSTR('20',P_TABLA) = 0 ) THEN
    OPEN p_cursor FOR
      SELECT ID_PARAMETRO CODE, DESCRIPCION NAME 
      FROM T_SCEL_PARAMETROS
      WHERE ID_PARAMETRO LIKE V_PARAM 
      AND LENGTH( ID_PARAMETRO ) > 2 
      ORDER BY ORDEN, DESCRIPCION;
  ELSE
    OPEN p_cursor FOR
      SELECT ID_PARAMETRO CODE, CODIGO NAME 
      FROM T_SCEL_PARAMETROS
      WHERE ID_PARAMETRO LIKE V_PARAM 
      AND LENGTH( ID_PARAMETRO ) > 2 
      ORDER BY ORDEN, DESCRIPCION;    
  END IF;
END;



PROCEDURE PRC_GET_TABLAS_FILTAR( 
  P_NOMBRE IN VARCHAR2, 
  P_CURSOR OUT NOCOPY T_CURSOR
)
IS
  V_NOMBRE VARCHAR(200);
BEGIN

	V_NOMBRE := '%' || P_NOMBRE || '%';

	OPEN p_cursor FOR
		SELECT TO_CHAR( ID_PARAMETRO ) CODE, DESCRIPCION NAME
		FROM T_SCEL_PARAMETROS
		WHERE CODIGO IS NULL AND DESCRIPCION LIKE V_NOMBRE;

END;



PROCEDURE PRC_GET_TABLAS_CONTENIDO( 
  P_TABLA IN VARCHAR2, 
  P_CURSOR OUT NOCOPY T_CURSOR
)
IS
  V_PARAM VARCHAR2(10);
BEGIN

  V_PARAM := P_TABLA || '%';

  OPEN p_cursor FOR
    SELECT ID_PARAMETRO ID, CODIGO, DESCRIPCION, ORDEN, ESTADO
    --CASE WHEN ESTADO = '1' THEN 'ACTIVO' ELSE 'INACTIVO' END ESTADO 
    FROM SISCE.T_SCEL_PARAMETROS
    WHERE ID_PARAMETRO LIKE V_PARAM 
    AND LENGTH( ID_PARAMETRO ) > 2;

END;



PROCEDURE PRC_GET_TABLAS_REG( 
  P_ID_PARAMETRO IN VARCHAR2, 
  P_CURSOR       OUT NOCOPY T_CURSOR
)
IS
BEGIN

  OPEN p_cursor FOR
    SELECT ID_PARAMETRO ID, CODIGO, DESCRIPCION, ORDEN, ESTADO
    FROM T_SCEL_PARAMETROS
    WHERE ID_PARAMETRO = P_ID_PARAMETRO;

END;



PROCEDURE PRC_DELETE_TABLAS_REG(
  P_ID_PARAMETRO IN T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
  P_IP           IN T_SCEM_AUDITORIA.IP%TYPE,
  P_USUARIO      IN T_SCEM_AUDITORIA.USUARIO%TYPE 
)
IS
  V_ID_TABLA CONSTANT T_SCEM_SECUENCIAS.ID_TABLA%TYPE  := 1;
  V_MENSAJE  VARCHAR2(1000);
  V_ID_PARAMETRO T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE := NULL;
BEGIN
  -- Cambia el estado de registro
  UPDATE T_SCEL_PARAMETROS 
  SET ESTADO = '0'
  WHERE ID_PARAMETRO = P_ID_PARAMETRO
  RETURNING ID_PARAMETRO INTO V_ID_PARAMETRO;
    
  IF ( V_ID_PARAMETRO IS NULL ) THEN
    RAISE NO_DATA_FOUND;
  END IF;

  INSERT INTO T_SCEM_AUDITORIA( ID_AUDITORIA, ID_TABLA, ID_REGISTRO, TIPO, IP, USUARIO )
  VALUES( SEQ_SCE_AUDITORIA.NEXTVAL, V_ID_TABLA, P_ID_PARAMETRO, 'E', P_IP, P_USUARIO );
  
COMMIT;
      
EXCEPTION

WHEN  NO_DATA_FOUND THEN
    V_MENSAJE := 'No se recupero el dato esperado (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20001, V_MENSAJE);
    ROLLBACK;
    
WHEN TOO_MANY_ROWS THEN
    V_MENSAJE := 'Se recupero mas valores de los esperados (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20002, V_MENSAJE);
    ROLLBACK;
    
WHEN OTHERS THEN
    V_MENSAJE := SQLERRM || ' (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20003, V_MENSAJE);
    ROLLBACK;    
    
END;




PROCEDURE PRC_RECUPERACION_TABLAS_REG(
    P_ID_PARAMETRO IN T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
    P_IP           IN T_SCEM_AUDITORIA.IP%TYPE,
    P_USUARIO      IN T_SCEM_AUDITORIA.USUARIO%TYPE 
)
IS
  V_ID_TABLA CONSTANT T_SCEM_SECUENCIAS.ID_TABLA%TYPE  := 1;
  V_MENSAJE  VARCHAR2(1000);
  V_ID_PARAMETRO T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE := NULL;
BEGIN

  UPDATE T_SCEL_PARAMETROS 
  SET ESTADO = '1'
  WHERE ID_PARAMETRO = P_ID_PARAMETRO
  RETURNING ID_PARAMETRO INTO V_ID_PARAMETRO;
  
  IF ( V_ID_PARAMETRO IS NULL ) THEN
      RAISE NO_DATA_FOUND;
  END IF;

  INSERT INTO T_SCEM_AUDITORIA( ID_AUDITORIA, ID_TABLA, ID_REGISTRO, TIPO, IP, USUARIO )
  VALUES( SEQ_SCE_AUDITORIA.NEXTVAL, V_ID_TABLA, P_ID_PARAMETRO, 'M', P_IP, P_USUARIO );
  
  COMMIT;
      
EXCEPTION

WHEN  NO_DATA_FOUND THEN
    V_MENSAJE := 'No se recupero el dato esperado (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20001, V_MENSAJE);
    ROLLBACK;
    
WHEN TOO_MANY_ROWS THEN
    V_MENSAJE := 'Se recupero mas valores de los esperados (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20002, V_MENSAJE);
    ROLLBACK;
    
WHEN OTHERS THEN
    V_MENSAJE := SQLERRM || ' (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20003, V_MENSAJE);
    ROLLBACK;    
    
END;



PROCEDURE PRC_UPDATE_TABLAS_TABLA(
    P_ID       IN T_ARRAY_STRING,
    P_CODIGO   IN T_ARRAY_STRING,
    P_ORDEN    IN T_ARRAY_INT,
    P_IP       IN T_SCEM_AUDITORIA.IP%TYPE,
    P_USUARIO  IN T_SCEM_AUDITORIA.USUARIO%TYPE  
) 
IS
  V_ID_TABLA CONSTANT T_SCEM_SECUENCIAS.ID_TABLA%TYPE  := 1;
  V_MENSAJE  VARCHAR2(1000);
  V_ID_PARAMETRO T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE := NULL;
BEGIN
 
  FOR i IN 1 .. P_ID.COUNT LOOP
  
    UPDATE T_SCEL_PARAMETROS SET
        CODIGO = P_CODIGO(i),
        ORDEN = P_ORDEN(i)
    WHERE ID_PARAMETRO = P_ID(i)
    RETURNING ID_PARAMETRO INTO V_ID_PARAMETRO;

    IF ( V_ID_PARAMETRO IS NULL ) THEN
        RAISE NO_DATA_FOUND;
    END IF;

    INSERT INTO T_SCEM_AUDITORIA( ID_AUDITORIA, ID_TABLA, ID_REGISTRO, TIPO, IP, USUARIO )
    VALUES( SEQ_SCE_AUDITORIA.NEXTVAL, V_ID_TABLA, P_ID(i), 'M', P_IP, P_USUARIO ); 
    
  END LOOP; 


  COMMIT;
      
EXCEPTION

WHEN  NO_DATA_FOUND THEN
    V_MENSAJE := 'No se recupero el dato esperado (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20001, V_MENSAJE);
    ROLLBACK;
    
WHEN TOO_MANY_ROWS THEN
    V_MENSAJE := 'Se recupero mas valores de los esperados (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20002, V_MENSAJE);
    ROLLBACK;
    
WHEN OTHERS THEN
    V_MENSAJE := SQLERRM || ' (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20003, V_MENSAJE);
    ROLLBACK;
   
END;




PROCEDURE PRC_INSERT_TABLAS_REG(
  P_ID_PARAMETRO OUT T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
  P_ID_PADRE     IN  T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,    
  P_CODIGO       IN  T_SCEL_PARAMETROS.CODIGO%TYPE,
  P_DESCRIPCION  IN  T_SCEL_PARAMETROS.DESCRIPCION%TYPE,
  P_ORDEN        IN  T_SCEL_PARAMETROS.ORDEN%TYPE,
  P_ESTADO       IN  T_SCEL_PARAMETROS.ESTADO%TYPE,  
  P_IP           IN  T_SCEM_AUDITORIA.IP%TYPE,
  P_USUARIO      IN  T_SCEM_AUDITORIA.USUARIO%TYPE
) 
IS
  V_ID_TABLA CONSTANT T_SCEM_SECUENCIAS.ID_TABLA%TYPE  := 1;
  V_MENSAJE  VARCHAR2(2000);
BEGIN

  SELECT LPAD( TO_CHAR( TO_NUMBER( MAX(ID_PARAMETRO) )  + 1 ), 5, '0' )  
  INTO P_ID_PARAMETRO
  FROM T_SCEL_PARAMETROS  
  WHERE ID_PARAMETRO LIKE P_ID_PADRE || '%' 
  AND LENGTH( ID_PARAMETRO ) > 2 ;
  

  INSERT INTO T_SCEL_PARAMETROS( ID_PARAMETRO, CODIGO, DESCRIPCION, ORDEN, ESTADO )
  VALUES( P_ID_PARAMETRO, P_CODIGO, UPPER(P_DESCRIPCION), P_ORDEN, P_ESTADO );
    

  INSERT INTO T_SCEM_AUDITORIA( ID_AUDITORIA, ID_TABLA, ID_REGISTRO, TIPO, IP, USUARIO )
  VALUES( SEQ_SCE_AUDITORIA.NEXTVAL, V_ID_TABLA, P_ID_PARAMETRO, 'C', P_IP, P_USUARIO );
  
  COMMIT;
      
EXCEPTION

WHEN  NO_DATA_FOUND THEN
    V_MENSAJE := 'No se recupero el dato esperado (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20001, V_MENSAJE);
    ROLLBACK;
    
WHEN TOO_MANY_ROWS THEN
    V_MENSAJE := 'Se recupero mas valores de los esperados (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20002, V_MENSAJE);
    ROLLBACK;
    
WHEN OTHERS THEN
    V_MENSAJE := SQLERRM || P_ID_PARAMETRO || ' (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20003, V_MENSAJE);
    ROLLBACK;
 
END;




PROCEDURE PRC_UPDATE_TABLAS_REG( 
  P_ID_PARAMETRO IN T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE,
  P_CODIGO       IN T_SCEL_PARAMETROS.CODIGO%TYPE,
  P_DESCRIPCION  IN T_SCEL_PARAMETROS.DESCRIPCION%TYPE,
  P_ORDEN        IN T_SCEL_PARAMETROS.ORDEN%TYPE,
  P_ESTADO       IN T_SCEL_PARAMETROS.ESTADO%TYPE,
  P_IP           IN T_SCEM_AUDITORIA.IP%TYPE,
  P_USUARIO      IN T_SCEM_AUDITORIA.USUARIO%TYPE 
) 
IS
  V_ID_TABLA CONSTANT T_SCEM_SECUENCIAS.ID_TABLA%TYPE  := 1;
  V_MENSAJE  VARCHAR2(1000);
  V_ID_PARAMETRO T_SCEL_PARAMETROS.ID_PARAMETRO%TYPE := NULL;
BEGIN
 
  -- Modificar datos del registro
  UPDATE T_SCEL_PARAMETROS SET
      CODIGO = P_CODIGO,
      DESCRIPCION = P_DESCRIPCION,
      ORDEN = P_ORDEN,
      ESTADO = P_ESTADO
  WHERE ID_PARAMETRO = P_ID_PARAMETRO
  RETURNING ID_PARAMETRO INTO V_ID_PARAMETRO;
  
  IF ( V_ID_PARAMETRO IS NULL ) THEN
      RAISE NO_DATA_FOUND;
  END IF;
 
  -- Insertar pista de auditoria
  
  INSERT INTO T_SCEM_AUDITORIA( ID_AUDITORIA, ID_TABLA, ID_REGISTRO, TIPO, IP, USUARIO )
  VALUES( SEQ_SCE_AUDITORIA.NEXTVAL, V_ID_TABLA, P_ID_PARAMETRO, 'M', P_IP, P_USUARIO );
  
  -- Confirmar TX
  
  COMMIT;
      
EXCEPTION

WHEN  NO_DATA_FOUND THEN
    V_MENSAJE := 'No se recupero el dato esperado (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20001, V_MENSAJE);
    ROLLBACK;
    
WHEN TOO_MANY_ROWS THEN
    V_MENSAJE := 'Se recupero mas valores de los esperados (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20002, V_MENSAJE);
    ROLLBACK;
    
WHEN OTHERS THEN
    V_MENSAJE := SQLERRM || ' (' || TO_CHAR(SQLCODE) || ')';
    RAISE_APPLICATION_ERROR(-20003, V_MENSAJE);
    ROLLBACK;
   
END;



END PKG_SCE_PARAMETROS;
/
