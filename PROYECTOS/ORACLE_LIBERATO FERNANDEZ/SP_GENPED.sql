CREATE OR REPLACE PROCEDURE LOGISTICA.SP_GENPED(
P_ID_TIENDA        IN LOGISTICA.STOCK_TIENDA.ID_TIENDA%TYPE,
P_ID_PRODUCTO        IN LOGISTICA.STOCK_TIENDA.ID_PRODUCTO%TYPE,
P_CANTIDAD        NUMBER
)AS
V_STOCK NUMBER := 0;
V_STOCK_ID_TIENDA NUMBER := 0;
V_NEWCANT NUMBER := 0;
V_NEW_ID_PEDIDO NUMBER;
CURSOR v_cursor is
SELECT *
FROM LOGISTICA.STOCK_TIENDA
WHERE ID_PRODUCTO = P_ID_PRODUCTO
AND STOCKCANT >0 
FOR UPDATE;

BEGIN

--CALCULANDO DISPONIBILIDAD DE STOCK
FOR V_REC IN V_CURSOR loop
    V_STOCK := V_STOCK +  V_REC.STOCKCANT;

    IF P_ID_TIENDA = V_REC.ID_TIENDA THEN
    V_STOCK_ID_TIENDA := V_REC.STOCKCANT;
    END IF;
  end loop;

 --VALIDANDO STOCK
  IF  V_STOCK < P_CANTIDAD THEN
    ROLLBACK;
  ELSE
  --SI HAY STOCK
  INSERT INTO LOGISTICA.PEDIDO(ID_PEDIDO,ID_TIENDA ,PEDFEC   )
  VALUES (LOGISTICA.PEDIDO_SEQ.NEXTVAL,P_ID_TIENDA , SYSDATE ) returning ID_PEDIDO into V_NEW_ID_PEDIDO ;
      V_NEWCANT := P_CANTIDAD;
      IF V_STOCK_ID_TIENDA = 0 THEN
             FOR V_REC IN V_CURSOR loop

                     IF V_REC.STOCKCANT >= V_NEWCANT THEN
                     --INSERTA DETALLE DE PEDIDO PARA EL PRODUCTO
                     INSERT INTO LOGISTICA.DETALLE_PEDIDO(ID_DETPEDIDO , ID_PEDIDO,ID_TIENDA,ID_PRODUCTO ,ID_TIENDA_ATIENDE ,DETPEDCAN  )
                     VALUES (LOGISTICA.DETPEDIDO_SEQ.NEXTVAL,V_NEW_ID_PEDIDO,P_ID_TIENDA, P_ID_PRODUCTO  , V_REC.ID_TIENDA  ,V_NEWCANT  ) ;
                     --ACTUALIZA STOCK PARA LA TIENDA
                     UPDATE LOGISTICA.STOCK_TIENDA
                        SET STOCKCANT = STOCKCANT - V_NEWCANT
                        WHERE ID_TIENDA   = V_REC.ID_TIENDA
                        AND   ID_PRODUCTO = P_ID_PRODUCTO ;
                     EXIT;
                     ELSE
                     --INSERTA DETALLE PARA EL PRODUCTO
                     INSERT INTO LOGISTICA.DETALLE_PEDIDO(ID_DETPEDIDO , ID_PEDIDO,ID_TIENDA,ID_PRODUCTO ,ID_TIENDA_ATIENDE ,DETPEDCAN  )
                     VALUES (LOGISTICA.DETPEDIDO_SEQ.NEXTVAL,V_NEW_ID_PEDIDO,P_ID_TIENDA, P_ID_PRODUCTO  , V_REC.ID_TIENDA  ,V_REC.STOCKCANT  ) ;

                     UPDATE LOGISTICA.STOCK_TIENDA
                        SET STOCKCANT = STOCKCANT - V_REC.STOCKCANT
                        WHERE ID_TIENDA   = V_REC.ID_TIENDA
                        AND   ID_PRODUCTO = P_ID_PRODUCTO ;

                     END IF;
                     --ACTUALIZA FALTANTE A COMPLETAR
                     V_NEWCANT := V_NEWCANT - V_REC.STOCKCANT;
              end loop;
          COMMIT;    
      ELSE
             IF V_STOCK_ID_TIENDA >= P_CANTIDAD THEN
             --OBTIENE STOCK DE LA TIENDA QUE SE HACE EL PEDIDO
                 INSERT INTO LOGISTICA.DETALLE_PEDIDO(ID_DETPEDIDO , ID_PEDIDO,ID_TIENDA,ID_PRODUCTO ,ID_TIENDA_ATIENDE ,DETPEDCAN  )
                     VALUES (LOGISTICA.DETPEDIDO_SEQ.NEXTVAL,V_NEW_ID_PEDIDO,P_ID_TIENDA, P_ID_PRODUCTO  , P_ID_TIENDA  ,P_CANTIDAD  ) ;

                     UPDATE LOGISTICA.STOCK_TIENDA
                        SET STOCKCANT = STOCKCANT - P_CANTIDAD
                        WHERE ID_TIENDA   = P_ID_TIENDA
                        AND   ID_PRODUCTO = P_ID_PRODUCTO ;
             COMMIT;
             ELSE
                 --OBTIENE TODO LA CANTIDAD DE LA TIENDA QUE SOLICITA
                 INSERT INTO LOGISTICA.DETALLE_PEDIDO(ID_DETPEDIDO , ID_PEDIDO,ID_TIENDA,ID_PRODUCTO ,ID_TIENDA_ATIENDE ,DETPEDCAN  )
                     VALUES (LOGISTICA.DETPEDIDO_SEQ.NEXTVAL,V_NEW_ID_PEDIDO,P_ID_TIENDA, P_ID_PRODUCTO  , P_ID_TIENDA  ,V_STOCK_ID_TIENDA  ) ;

                     UPDATE LOGISTICA.STOCK_TIENDA
                        SET STOCKCANT = STOCKCANT - V_STOCK_ID_TIENDA
                        WHERE ID_TIENDA   = P_ID_TIENDA
                        AND   ID_PRODUCTO = P_ID_PRODUCTO ;

                  --CALCULA FALTANTE A SOLICITAR DE OTRAS TIENDAS
                  V_NEWCANT := P_CANTIDAD - V_STOCK_ID_TIENDA ;

                  --OBTENER STOCK DE OTRAS TIENDAS 

                  FOR V_REC IN V_CURSOR loop

                    IF V_REC.ID_TIENDA <> P_ID_TIENDA THEN
                     IF V_REC.STOCKCANT >= V_NEWCANT THEN
                             --INSERTA DETALLE PARA EL PRODUCTO
                             INSERT INTO LOGISTICA.DETALLE_PEDIDO(ID_DETPEDIDO , ID_PEDIDO,ID_TIENDA,ID_PRODUCTO ,ID_TIENDA_ATIENDE ,DETPEDCAN  )
                             VALUES (LOGISTICA.DETPEDIDO_SEQ.NEXTVAL,V_NEW_ID_PEDIDO,P_ID_TIENDA, P_ID_PRODUCTO  , V_REC.ID_TIENDA  ,V_NEWCANT  ) ;

                             UPDATE LOGISTICA.STOCK_TIENDA
                                SET STOCKCANT = STOCKCANT - V_NEWCANT
                                WHERE ID_TIENDA   = V_REC.ID_TIENDA
                                AND   ID_PRODUCTO = P_ID_PRODUCTO ;
                             EXIT;
                     ELSE
                         --INSERTA DETALLE PARA EL PRODUCTO
                         INSERT INTO LOGISTICA.DETALLE_PEDIDO(ID_DETPEDIDO , ID_PEDIDO,ID_TIENDA,ID_PRODUCTO ,ID_TIENDA_ATIENDE ,DETPEDCAN  )
                         VALUES (LOGISTICA.DETPEDIDO_SEQ.NEXTVAL,V_NEW_ID_PEDIDO,P_ID_TIENDA, P_ID_PRODUCTO  , V_REC.ID_TIENDA  ,V_REC.STOCKCANT  ) ;

                         UPDATE LOGISTICA.STOCK_TIENDA
                            SET STOCKCANT = STOCKCANT - V_REC.STOCKCANT
                            WHERE ID_TIENDA   = V_REC.ID_TIENDA
                            AND   ID_PRODUCTO = P_ID_PRODUCTO ;

                     END IF;
                     --ACTUALIZA EL RESTO DE PEDIDO A OBTENER DE OTRA TIENDA
                     V_NEWCANT := V_NEWCANT - V_REC.STOCKCANT;
                 END IF;    
              end loop;
          COMMIT; 

             END IF;

      END IF;


  END IF;

--IF SQL%NOTFOUND THEN
--RAISE v_excep1;
--END IF;

EXCEPTION
WHEN NO_DATA_FOUND THEN
ROLLBACK; -- cancelar transacción
    raise_application_error(-20001,'STOCK AGOTADO');

END;
/

